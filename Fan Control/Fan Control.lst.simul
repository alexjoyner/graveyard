***********************************************************************
*
*	CODE GENERATION LISTING FOR: Fan Control
*	COMPILER VERSION: 2.1.0
*
***********************************************************************

***********************************************************************
UNUSED FUNCTIONS:

	BITTOWORD
	BITTOBYTE
	BYTETOWORD
***********************************************************************

***********************************************************************
UNUSED FUNCTION BLOCKS:

	PULSE
	FF_D
	BYTETOBIT
	WORDTOBIT
	WORDTOBYTE
	CTD
	CTD_DINT
	CTD_UDINT
	CTU
	CTU_DINT
	CTU_UDINT
	CTUD
	CTUD_DINT
	CTUD_UDINT
	TOF
	TON
	TP
	SR
	RS
	R_TRIG
	F_TRIG
	DAYLIGHTSAVING
	OPERATINGHOURS
	PIDADVANCED
	PIDAUTOTUNING
	STEPCONTROLLERANALOG
	THREEPOINTACTUATOR
	AHUPLANTMODESTRATEGY
	AHUTEMPCNTRLSTRATEGY
	PSYCHROMETRIC
	COPCALCULATION
	COUNTER2ENERGY
	PULSE2COUNTER
	THERMALPOWERCALCULATION
	COMPALARMMGMT
	COMPAPPLIMIT
	COMPCNTRL_ONOFF
	COMPCNTRL_SLIDER
	COMPCNTRL_VS
	COMPMGMT
	DOUBLEINTERPO_5X8
	FANMGMT
	FLOATINGHIGHPRESCNTRL
	FLUID_DENSITY
	FLUID_ENTHALPY
	THERMALPOWER_ENTHALPY
	PRESS2TEMP
	TEMP2PRESS
	REDUNDANTPUMPCNTRL
	ATV12MODBUSCOM
	ATV212MODBUSCOM
	ATV21MODBUSCOM
	ATV312MODBUSCOM
	ATV31MODBUSCOM
	ATV32MODBUSCOM
	ATV61MODBUSCOM
	ATV71MODBUSCOM
	AUXPUMPCTRL
	CAVTPROT
	COMPSP
	COMPSPFLOW
	DEVSWCPUMPCTRL
	FSPUMPCTRL
	OPINTAUXPUMP
	OPINTPUMP
	OPPRTY
	PID_PARA_CHECK
	PIPEFILL
	PUMPAVAI
	PUMPFBCKMAPP
	PUMPPID
	PUMPPIDSTAG
	VSDAVAI
	VSDCTRL
	VSDNU
	VSPUMPCTRL
***********************************************************************

**************************************************
	List program: FAN_MANAGEMENT
**************************************************

PROGRAM FAN_MANAGEMENT

END_PROGRAM

062609B0  55                            push ebp
062609B1  8B EC                         mov ebp, esp
062609B3  60                            pushad

#0		{SRC:FAN_MANAGEMENT}
#1
#2
#3
#4
#5		{L:2}
(*) UNDEF
062609B4  33 C0                         xor eax, eax
062609B6  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+8

#6		{L:2}
(*) BOOL
062609BC  35 01 00 00 00                xor eax, 00000001H

#7		{L:2}
(-) BOOL
062609C1  84 C0                         test al, al
062609C3  90 74 2D 90 90 90             je 062609F3H

#8
#9
#10
#11
#12		{L:3}
(*) BOOL
062609C9  B8 00 00 00 00                mov eax, 0
062609CE  84 C0                         test al, al
062609D0  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+5

#13
#14
#15		{L:4}
(*) BOOL
062609D7  B8 00 00 00 00                mov eax, 0
062609DC  84 C0                         test al, al
062609DE  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+4

#16
#17
#18		{L:5}
(*) BOOL
062609E5  B8 00 00 00 00                mov eax, 0
062609EA  84 C0                         test al, al
062609EC  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+3

#19
#20
#21
#22
#23
#24
#25		{L:9}
(*) UNDEF
062609F3  33 C0                         xor eax, eax
062609F5  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+8

#26		{L:9}
(*) BOOL
062609FB  35 00 00 00 00                xor eax, 00000000H

#27		{L:9}
(*) BOOL
06260A00  50                            push eax
06260A01  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+10

#28		{L:9}
(*) INT
06260A08  3D 4D 01 00 00                cmp eax, 333
06260A0D  0F 9E C0                      setle al
06260A10  25 FF 00 00 00                and eax, 0FFh

#29		{L:9}
(*) BOOL
06260A15  8B C8                         mov ecx, eax
06260A17  58                            pop eax
06260A18  23 C1                         and eax, ecx

#30		{L:9}
(-) BOOL
06260A1A  84 C0                         test al, al
06260A1C  90 74 16 90 90 90             je 06260A35H

#31
#32
#33
#34
#35		{L:10}
(*) BOOL
06260A22  B8 01 00 00 00                mov eax, 1
06260A27  84 C0                         test al, al
06260A29  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+3

#36
(-) BOOL
06260A30  EB 11 90 90 90                jmp 06260A43H

#37
#38
#39
#40
#41
#42		{L:11}
(*) BOOL
06260A35  B8 00 00 00 00                mov eax, 0
06260A3A  84 C0                         test al, al
06260A3C  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+3

#43
#44
#45
#46
#47
#48
#49		{L:14}
(*) UNDEF
06260A43  33 C0                         xor eax, eax
06260A45  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+8

#50		{L:14}
(*) BOOL
06260A4B  35 00 00 00 00                xor eax, 00000000H

#51		{L:14}
(*) BOOL
06260A50  50                            push eax
06260A51  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+10

#52		{L:14}
(*) INT
06260A58  3D 4D 01 00 00                cmp eax, 333
06260A5D  0F 9F C0                      setg al
06260A60  25 FF 00 00 00                and eax, 0FFh

#53		{L:14}
(*) BOOL
06260A65  50                            push eax
06260A66  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+10

#54		{L:14}
(*) INT
06260A6D  3D 9A 02 00 00                cmp eax, 666
06260A72  0F 9E C0                      setle al
06260A75  25 FF 00 00 00                and eax, 0FFh

#55		{L:14}
(*) BOOL
06260A7A  8B C8                         mov ecx, eax
06260A7C  58                            pop eax
06260A7D  23 C1                         and eax, ecx

#56		{L:14}
(*) BOOL
06260A7F  8B C8                         mov ecx, eax
06260A81  58                            pop eax
06260A82  23 C1                         and eax, ecx

#57		{L:14}
(-) BOOL
06260A84  84 C0                         test al, al
06260A86  90 74 32 90 90 90             je 06260ABBH

#58
#59
#60
#61
#62		{L:15}
(*) BOOL
06260A8C  B8 01 00 00 00                mov eax, 1
06260A91  84 C0                         test al, al
06260A93  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+5

#63
#64
#65		{L:16}
(*) BOOL
06260A9A  B8 01 00 00 00                mov eax, 1
06260A9F  84 C0                         test al, al
06260AA1  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+4

#66
#67
#68		{L:17}
(*) BOOL
06260AA8  B8 01 00 00 00                mov eax, 1
06260AAD  84 C0                         test al, al
06260AAF  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+3

#69
(-) BOOL
06260AB6  EB 11 90 90 90                jmp 06260AC9H

#70
#71
#72
#73
#74
#75		{L:18}
(*) BOOL
06260ABB  B8 00 00 00 00                mov eax, 0
06260AC0  84 C0                         test al, al
06260AC2  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+5

#76
#77
#78
#79
#80
#81
#82		{L:21}
(*) UNDEF
06260AC9  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+10

#83		{L:21}
(*) INT
06260AD0  3D 00 80 FF FF                cmp eax, -32768
06260AD5  0F 94 C0                      sete al
06260AD8  25 FF 00 00 00                and eax, 0FFh

#84		{L:21}
(-) BOOL
06260ADD  84 C0                         test al, al
06260ADF  90 74 40 90 90 90             je 06260B22H

#85
#86
#87
#88
#89		{L:22}
(*) BOOL
06260AE5  B8 01 00 00 00                mov eax, 1
06260AEA  84 C0                         test al, al
06260AEC  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#90
#91
#92		{L:23}
(*) BOOL
06260AF3  B8 00 00 00 00                mov eax, 0
06260AF8  84 C0                         test al, al
06260AFA  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+5

#93
#94
#95		{L:24}
(*) BOOL
06260B01  B8 00 00 00 00                mov eax, 0
06260B06  84 C0                         test al, al
06260B08  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+4

#96
#97
#98		{L:25}
(*) BOOL
06260B0F  B8 00 00 00 00                mov eax, 0
06260B14  84 C0                         test al, al
06260B16  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+3

#99
(-) BOOL
06260B1D  EB 11 90 90 90                jmp 06260B30H

#100
#101
#102
#103
#104
#105		{L:26}
(*) BOOL
06260B22  B8 00 00 00 00                mov eax, 0
06260B27  84 C0                         test al, al
06260B29  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#106
#107
#108
#109
#110
#111		{L:29}
(*) BOOL
06260B30  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+10
06260B37  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %Q0+0

06260B3E  61                            popad
06260B3F  5D                            pop ebp

06260B40  C3                            ret

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
06260B41  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+0
06260B47  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+8

06260B4D  66 8B 0D CC CC CC CC          mov cx, [CCCCCCCCH] ; %I1+4
06260B54  66 89 0D CC CC CC CC          mov [CCCCCCCCH], cx ; $$DATA$$+10

06260B5B  C3                            ret


*** OUTPUT:
06260B5C  C3                            ret



**************************************************
	Task BACKGROUND init code
**************************************************

06260B5D  55                            push ebp
06260B5E  8B EC                         mov ebp, esp

06260B60  8B E5                         mov esp, ebp
06260B62  5D                            pop ebp

06260B63  C3                            ret

**************************************************
	List program: SETEXECUTIONTIME
**************************************************

PROGRAM SETEXECUTIONTIME

END_PROGRAM

06260B80  55                            push ebp
06260B81  8B EC                         mov ebp, esp
06260B83  60                            pushad

06260B84  61                            popad
06260B85  5D                            pop ebp

06260B86  C3                            ret

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
06260B87  C3                            ret


*** OUTPUT:
06260B88  C3                            ret



**************************************************
	Task INIT init code
**************************************************

06260B89  55                            push ebp
06260B8A  8B EC                         mov ebp, esp

06260B8C  8B E5                         mov esp, ebp
06260B8E  5D                            pop ebp

06260B8F  C3                            ret



**************************************************
	Global init code
**************************************************

06260BB0  55                            push ebp
06260BB1  8B EC                         mov ebp, esp

06260BB3  8B E5                         mov esp, ebp
06260BB5  5D                            pop ebp

06260BB6  C3                            ret



**************************************************
	Global RETAIN init code
**************************************************

06260BB7  55                            push ebp
06260BB8  8B EC                         mov ebp, esp

06260BBA  8B E5                         mov esp, ebp
06260BBC  5D                            pop ebp

06260BBD  C3                            ret



********************************************
MEMORY MAP
********************************************

Start code area:			 6260020h
End code area:				 6260BC0h
Code size:					     BA0h

Start local data area:		 2CF0020h
End local data area:		 2CF002Ch
Local data size:			       Ch

Start retentive data area:	       0h
End retentive data area:	       0h
Retentive data size:		       0h

Start bit data area:		       0h
End bit data area:			       0h
Bit data size:				       0h



********************************************
CODE ID:                                FCF669BC
DEBUG MEMO ID:                          00007669
FULL MEMO ID:                           0000562B
RELOCATION ADDR:                        06260020
********************************************
