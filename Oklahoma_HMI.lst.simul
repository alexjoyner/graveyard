***********************************************************************
*
*	CODE GENERATION LISTING FOR: Oklahoma_HMI
*	COMPILER VERSION: 2.2.0
*
***********************************************************************

***********************************************************************
UNUSED FUNCTIONS:

	BITTOWORD
	BITTOBYTE
	BYTETOWORD
	F_MATRIXREADBYTE
***********************************************************************

***********************************************************************
UNUSED FUNCTION BLOCKS:

	PULSE
	FF_D
	BYTETOBIT
	WORDTOBIT
	WORDTOBYTE
	CTD
	CTD_DINT
	CTD_UDINT
	CTU
	CTU_DINT
	CTU_UDINT
	CTUD
	CTUD_DINT
	CTUD_UDINT
	TOF
	TP
	SR
	RS
	F_TRIG
	YEARLYEVENT
	WEEKSCHEDULE
	THREEPOINTACTUATOR
	STEPCONTROLLERANALOG
	PIDAUTOTUNING
	PIDADVANCED
	OPERATINGHOURS
	DAYLIGHTSAVING
	FB_SETMASKINGPATTERN
	FB_SETFORMATINFOPATTERN
	FB_SETFINDERPATTERN
	FB_SETBITSTREAM
	FB_SETALIGNMENTPATTERN
	FB_MATRIXWRITEBYTE
	FB_GETRSCODEWORD
	QRCODEGENERATOR
	ECFANMGMT
	PSYCHROMETRIC
	AHUTEMPCNTRLSTRATEGY
	AHUPLANTMODESTRATEGY
	REDUNDANTPUMPCNTRL
	COPCALCULATION
	THERMALPOWERCALCULATION
	PULSE2COUNTER
	COUNTER2ENERGY
	FLOATINGHIGHPRESCNTRL
	COMPMGMTVS
	THERMALPOWER_ENTHALPY
	DOUBLEINTERPO_5X8
	FLUID_DENSITY
	FLUID_ENTHALPY
	TEMP2PRESS
	PRESS2TEMP
	FANMGMT
	COMPMGMT
	COMPCNTRL_SLIDER
	COMPCNTRL_VS
	COMPCNTRL_ONOFF
	COMPAPPLIMIT
	COMPALARMMGMT
	ATV71MODBUSCOM
	ATV61MODBUSCOM
	ATV32MODBUSCOM
	ATV31MODBUSCOM
	ATV312MODBUSCOM
	ATV21MODBUSCOM
	ATV212MODBUSCOM
	ATV12MODBUSCOM
	AUXPUMPCTRL
	CAVTPROT
	COMPSP
	COMPSPFLOW
	DEVSWCPUMPCTRL
	FSPUMPCTRL
	OPINTAUXPUMP
	OPINTPUMP
	OPPRTY
	PID_PARA_CHECK
	PIPEFILL
	PUMPAVAI
	PUMPFBCKMAPP
	PUMPPID
	PUMPPIDSTAG
	VSDAVAI
	VSDCTRL
	VSDNU
	VSPUMPCTRL
***********************************************************************

**************************************************
	List function block: R_TRIG
**************************************************

FUNCTION_BLOCK R_TRIG

	{ DE:"Rising edge detector" }

        VAR_INPUT
CLK : BOOL;	{ DE:"Clock" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Out" }
	END_VAR

        VAR
M : BOOL := TRUE;
	END_VAR

END_FUNCTION_BLOCK

055E1E00  55                            push ebp
055E1E01  8B EB                         mov ebp, ebx

#0		{SRC:R_TRIG}
#1
#2
(*) UNDEF
055E1E03  33 C0                         xor eax, eax
055E1E05  8A 45 01                      mov al, 1[ebp]

#3
(*) BOOL
055E1E08  33 C9                         xor ecx, ecx
055E1E0A  8A 4D 00                      mov cl, [ebp]
055E1E0D  84 C9                         test cl, cl
055E1E0F  0F 94 C1                      sete cl
055E1E12  23 C1                         and eax, ecx

#4
(*) BOOL
055E1E14  84 C0                         test al, al
055E1E16  0F 95 45 02                   setne 2[ebp]

#5
#6
(*) UNDEF
055E1E1A  33 C0                         xor eax, eax
055E1E1C  8A 45 01                      mov al, 1[ebp]

#7
(*) BOOL
055E1E1F  84 C0                         test al, al
055E1E21  0F 95 45 00                   setne [ebp]

055E1E25  5D                            pop ebp

055E1E26  C3                            ret


Frame allocation:

	0000 bit  0: VAR M
	0001 bit  0: VAR CLK
	0002 bit  0: VAR Q

END_FUNCTION_BLOCK
**************************************************
	List function block: TON
**************************************************

FUNCTION_BLOCK TON

	{ DE:"On-delay timer" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value [ms]" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value [ms]" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
SYSTIMER AT %MD0.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
TIMSTART : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

055E1E27  55                            push ebp
055E1E28  8B EB                         mov ebp, ebx

#0		{SRC:TON}
#1
#2
#3
#4
(*) UNDEF
055E1E2A  33 C0                         xor eax, eax
055E1E2C  8A 45 04                      mov al, 4[ebp]

#5
(-) BOOL
055E1E2F  84 C0                         test al, al
055E1E31  90 74 61 90 90 90             je 055E1E95H

#6
#7
#8
(*) UNDEF
055E1E37  33 C0                         xor eax, eax
055E1E39  8A 45 09                      mov al, 9[ebp]

#9
(-) BOOL
055E1E3C  84 C0                         test al, al
055E1E3E  90 75 4F 90 90 90             jne 055E1E90H

#10
#11
#12
(*) UNDEF
055E1E44  8B 45 00                      mov eax, [ebp]

#13
(*) UDINT
055E1E47  3D 00 00 00 00                cmp eax, 0
055E1E4C  0F 94 C0                      sete al
055E1E4F  25 FF 00 00 00                and eax, 0FFh

#14
(-) BOOL
055E1E54  84 C0                         test al, al
055E1E56  90 74 0C 90 90 90             je 055E1E65H

#15
#16
#17
(*) UNDEF
055E1E5C  8B 05 CC CC CC CC             mov eax, [CCCCCCCCH] ; %M0+0

#18
(*) UDINT
055E1E62  89 45 00                      mov [ebp], eax

#19
#20
#21
#22
#23
(*) UNDEF
055E1E65  8B 05 CC CC CC CC             mov eax, [CCCCCCCCH] ; %M0+0

#24
(*) UDINT
055E1E6B  2B 45 00                      sub eax, [ebp]

#25
(*) UDINT
055E1E6E  89 45 0A                      mov 10[ebp], eax

#26
(*) UDINT
055E1E71  3B 45 05                      cmp eax, [ebp+5]
055E1E74  0F 93 C0                      setae al
055E1E77  25 FF 00 00 00                and eax, 0FFh

#27
(*) BOOL
055E1E7C  84 C0                         test al, al
055E1E7E  0F 95 45 09                   setne 9[ebp]

#28
(-) BOOL
055E1E82  84 C0                         test al, al
055E1E84  90 74 09 90 90 90             je 055E1E90H

#29
#30
#31
(*) UNDEF
055E1E8A  8B 45 05                      mov eax, 5[ebp]

#32
(*) UDINT
055E1E8D  89 45 0A                      mov 10[ebp], eax

#33
#34
#35
#36
#37
(-) UDINT
055E1E90  EB 19 90 90 90                jmp 055E1EABH

#38
#39
#40
#41
(*) UNDEF
055E1E95  B8 00 00 00 00                mov eax, 0

#42
(*) USINT
055E1E9A  89 45 0A                      mov 10[ebp], eax

#43
(*) UDINT
055E1E9D  89 45 00                      mov [ebp], eax

#44
(*) UNDEF
055E1EA0  B8 00 00 00 00                mov eax, 0

#45
(*) BOOL
055E1EA5  84 C0                         test al, al
055E1EA7  0F 95 45 09                   setne 9[ebp]

055E1EAB  5D                            pop ebp

055E1EAC  C3                            ret


Frame allocation:

	0000       : VAR TIMSTART
	0004 bit  0: VAR IN
	0005       : VAR PT
	0009 bit  0: VAR Q
	000A       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List program: INITPARDB
**************************************************

PROGRAM INITPARDB

        VAR
WARNINGSKILLER : USINT;
DUMMYCRC32 : UDINT;
	END_VAR

END_PROGRAM

055E1EB0  55                            push ebp
055E1EB1  8B EC                         mov ebp, esp
055E1EB3  60                            pushad

#0		{SRC:INITPARDB}
#1
#2
#3
#4		{L:3}
(*) UDINT
055E1EB4  B8 5A 25 27 C9                mov eax, 3374785882
055E1EB9  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+12

#5
#6
#7		{L:5}
(*) UDINT
055E1EBF  B8 CC CC CC CC                mov eax, CCCCCCCCH ; $$CODE$$+4830

#8		{L:5}
(*) @UDINT
055E1EC4  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+88

#9		{L:5}
(*) UNDEF
055E1ECA  8B 05 CC CC CC CC             mov eax, [CCCCCCCCH] ; $$DATA$$+88

#10		{L:5}
(-) @UDINT
055E1ED0  68 0E 00 00 00                push 14
055E1ED5  50                            push eax
055E1ED6  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; SYSDBASE_SETEXTTABLE
055E1EDB  FF D1                         call ecx
055E1EDD  81 C4 08 00 00 00             add esp, 8

#11		{L:5}
(*) USINT
055E1EE3  88 05 CC CC CC CC             mov [CCCCCCCCH], al ; $$DATA$$+20

055E1EE9  61                            popad
055E1EEA  5D                            pop ebp

055E1EEB  C3                            ret

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
055E1EEC  C3                            ret


*** OUTPUT:
055E1EED  C3                            ret



**************************************************
	Task SERV init code
**************************************************

055E1EEE  55                            push ebp
055E1EEF  8B EC                         mov ebp, esp

055E1EF1  8B E5                         mov esp, ebp
055E1EF3  5D                            pop ebp

055E1EF4  C3                            ret

**************************************************
	List program: RESET_ALARMS
**************************************************

PROGRAM RESET_ALARMS

END_PROGRAM

055E1F00  55                            push ebp
055E1F01  8B EC                         mov ebp, esp
055E1F03  60                            pushad

#0		{SRC:RESET_ALARMS}
#1
#2
#3
#4
#5		{L:1}
(*) UNDEF
055E1F04  33 C0                         xor eax, eax
055E1F06  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %M110+10

#6		{L:1}
(-) BOOL
055E1F0C  84 C0                         test al, al
055E1F0E  90 74 49 90 90 90             je 055E1F5AH

#7
#8
#9
#10
#11		{L:2}
(*) BOOL
055E1F14  B8 00 00 00 00                mov eax, 0
055E1F19  84 C0                         test al, al
055E1F1B  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %M110+0

#12
#13
#14		{L:3}
(*) BOOL
055E1F22  B8 00 00 00 00                mov eax, 0
055E1F27  84 C0                         test al, al
055E1F29  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %M110+2

#15
#16
#17		{L:4}
(*) BOOL
055E1F30  B8 00 00 00 00                mov eax, 0
055E1F35  84 C0                         test al, al
055E1F37  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %M110+4

#18
#19
#20		{L:5}
(*) BOOL
055E1F3E  B8 00 00 00 00                mov eax, 0
055E1F43  84 C0                         test al, al
055E1F45  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %M110+6

#21
#22
#23		{L:6}
(*) BOOL
055E1F4C  B8 00 00 00 00                mov eax, 0
055E1F51  84 C0                         test al, al
055E1F53  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %M110+8

END_PROGRAM
**************************************************
	List program: SILENCE_ALARMS
**************************************************

PROGRAM SILENCE_ALARMS

END_PROGRAM

#0		{SRC:SILENCE_ALARMS}
#1
#2
#3
#4
#5		{L:1}
(*) UNDEF
055E1F5A  33 C0                         xor eax, eax
055E1F5C  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %M110+12

#6		{L:1}
(-) BOOL
055E1F62  84 C0                         test al, al
055E1F64  90 74 11 90 90 90             je 055E1F78H

#7
#8
#9
#10
#11		{L:2}
(*) BOOL
055E1F6A  B8 00 00 00 00                mov eax, 0
055E1F6F  84 C0                         test al, al
055E1F71  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

END_PROGRAM
**************************************************
	List program: AUDIBLE_ALARM_CTRL
**************************************************

PROGRAM AUDIBLE_ALARM_CTRL

        VAR
ONESHOT : R_TRIG;
	END_VAR

END_PROGRAM

#0		{SRC:AUDIBLE_ALARM_CTRL}
#1
#2
#3
#4		{L:3}
(*) UDINT
055E1F78  33 C0                         xor eax, eax
055E1F7A  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+21
055E1F80  84 C0                         test al, al
055E1F82  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+23

#5		{L:3}
(*) BOOL
055E1F89  50                            push eax
055E1F8A  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+22
055E1F8F  E8 6C FE FF FF                call 055E1E00H
055E1F94  58                            pop eax

#6
#7
#8
#9		{L:4}
(*) UNDEF
055E1F95  33 C0                         xor eax, eax
055E1F97  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+24

#10		{L:4}
(-) BOOL
055E1F9D  84 C0                         test al, al
055E1F9F  90 74 11 90 90 90             je 055E1FB3H

#11
#12
#13
#14
#15		{L:5}
(*) BOOL
055E1FA5  B8 01 00 00 00                mov eax, 1
055E1FAA  84 C0                         test al, al
055E1FAC  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

END_PROGRAM
**************************************************
	List program: HIGHRTD
**************************************************

PROGRAM HIGHRTD

        VAR
HIGHRTDTIMER : TON;
HIGHRTDTIMERVAL : UDINT;
	END_VAR

END_PROGRAM

#0		{SRC:HIGHRTD}
#1
#2
#3
#4
#5
#6		{R:"1$O:17"}
(*) UNDEF
055E1FB3  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+26

#7		{R:"1$O:17"}
(*) INT
055E1FBA  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+16
055E1FC1  3B C1                         cmp eax, ecx
055E1FC3  0F 9D C0                      setge al
055E1FC6  25 FF 00 00 00                and eax, 0FFh

#8
#9		{R:"1$O:17"}
(*) BOOL
055E1FCB  84 C0                         test al, al
055E1FCD  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+87

#10		{R:"1$O:15"}
(*) UNDEF
055E1FD4  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+28

#11		{R:"1$O:15"}
(*) INT
055E1FDB  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+18
055E1FE2  3B C1                         cmp eax, ecx
055E1FE4  0F 9D C0                      setge al
055E1FE7  25 FF 00 00 00                and eax, 0FFh

#12
#13		{R:"1$O:15"}
(*) BOOL
055E1FEC  84 C0                         test al, al
055E1FEE  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+86

#14		{R:"1$O:7"}
(*) UNDEF
055E1FF5  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+32

#15		{R:"1$O:7"}
(*) INT
055E1FFC  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+26
055E2003  3B C1                         cmp eax, ecx
055E2005  0F 9D C0                      setge al
055E2008  25 FF 00 00 00                and eax, 0FFh

#16
#17		{R:"1$O:7"}
(*) BOOL
055E200D  84 C0                         test al, al
055E200F  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+92

#18		{R:"1$O:21"}
(*) UNDEF
055E2016  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+34

#19		{R:"1$O:21"}
(*) INT
055E201D  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+14
055E2024  3B C1                         cmp eax, ecx
055E2026  0F 9D C0                      setge al
055E2029  25 FF 00 00 00                and eax, 0FFh

#20
#21		{R:"1$O:21"}
(*) BOOL
055E202E  84 C0                         test al, al
055E2030  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+93

#22		{R:"1$O:8"}
(*) UNDEF
055E2037  33 C0                         xor eax, eax
055E2039  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+87

#23		{R:"1$O:8"}
(*) BOOL
055E203F  33 C9                         xor ecx, ecx
055E2041  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+86
055E2047  0B C1                         or eax, ecx

#24
#25		{R:"1$O:9"}
(*) BOOL
055E2049  33 C9                         xor ecx, ecx
055E204B  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+92
055E2051  0B C1                         or eax, ecx

#26
#27		{R:"1$O:19"}
(*) BOOL
055E2053  33 C9                         xor ecx, ecx
055E2055  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+93
055E205B  0B C1                         or eax, ecx

#28		{R:"1$O:19"}
(*) BOOL
055E205D  84 C0                         test al, al
055E205F  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+42

#29
#30
#31		{R:"1$FB:HIGHRTDTIMER"}
(*) BOOL
055E2066  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M110+22
055E206D  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+43

#32		{R:"1$FB:HIGHRTDTIMER"}
(*) INT
055E2073  50                            push eax
055E2074  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+38
055E2079  E8 A9 FD FF FF                call 055E1E27H
055E207E  58                            pop eax

#33		{R:"1$FB:HIGHRTDTIMER"}
(*) INT
055E207F  33 C0                         xor eax, eax
055E2081  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+47
055E2087  84 C0                         test al, al
055E2089  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %M110+8

END_PROGRAM
**************************************************
	List program: VIBRATIONALARMCALC
**************************************************

PROGRAM VIBRATIONALARMCALC

        VAR
VIBRATIONALARM_0 : TON;
	END_VAR

END_PROGRAM

#0		{SRC:VIBRATIONALARMCALC}
#1
#2
#3
#4
#5
#6		{R:"1$O:7"}
(*) UNDEF
055E2090  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+52

#7		{R:"1$O:7"}
(*) INT
055E2097  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+20
055E209E  3B C1                         cmp eax, ecx
055E20A0  0F 9D C0                      setge al
055E20A3  25 FF 00 00 00                and eax, 0FFh

#8		{R:"1$O:7"}
(*) BOOL
055E20A8  84 C0                         test al, al
055E20AA  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+58

#9
#10
#11		{R:"1$FB:VIBRATIONALARM_0"}
(*) BOOL
055E20B1  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M110+24
055E20B8  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+59

#12		{R:"1$FB:VIBRATIONALARM_0"}
(*) INT
055E20BE  50                            push eax
055E20BF  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+54
055E20C4  E8 5E FD FF FF                call 055E1E27H
055E20C9  58                            pop eax

#13		{R:"1$FB:VIBRATIONALARM_0"}
(*) INT
055E20CA  33 C0                         xor eax, eax
055E20CC  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+63
055E20D2  84 C0                         test al, al
055E20D4  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %M110+6

END_PROGRAM
**************************************************
	List program: HIGHFLOATDETECT
**************************************************

PROGRAM HIGHFLOATDETECT

END_PROGRAM

#0		{SRC:HIGHFLOATDETECT}
#1
#2
#3
#4		{R:1$0}
(*) UNDEF
055E20DB  33 C0                         xor eax, eax
055E20DD  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+37

#5		{R:1$1}
(*) BOOL
055E20E3  84 C0                         test al, al
055E20E5  90 74 0A 90 90 90             je 055E20F2H
055E20EB  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %M110+4

END_PROGRAM
**************************************************
	List program: SEALFAILDETECT
**************************************************

PROGRAM SEALFAILDETECT

END_PROGRAM

#0		{SRC:SEALFAILDETECT}
#1
#2
#3
#4		{R:1$0}
(*) UNDEF
055E20F2  33 C0                         xor eax, eax
055E20F4  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+68

#5		{R:1$1}
(*) BOOL
055E20FA  84 C0                         test al, al
055E20FC  90 74 0A 90 90 90             je 055E2109H
055E2102  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %M110+2

END_PROGRAM
**************************************************
	List program: WINDINGTEMPDETECT
**************************************************

PROGRAM WINDINGTEMPDETECT

END_PROGRAM

#0		{SRC:WINDINGTEMPDETECT}
#1
#2
#3
#4		{R:1$0}
(*) UNDEF
055E2109  33 C0                         xor eax, eax
055E210B  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+69

#5		{R:1$1}
(*) BOOL
055E2111  84 C0                         test al, al
055E2113  90 74 0A 90 90 90             je 055E2120H
055E2119  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %M110+0

END_PROGRAM
**************************************************
	List program: ENABLEAUDIBLEALARM
**************************************************

PROGRAM ENABLEAUDIBLEALARM

END_PROGRAM

#0		{SRC:ENABLEAUDIBLEALARM}
#1
#2
#3
#4		{R:1$0}
(*) UNDEF
055E2120  33 C0                         xor eax, eax
055E2122  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %M110+0

#5		{R:1$5}
(*) BOOL
055E2128  33 C9                         xor ecx, ecx
055E212A  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %M110+2
055E2130  0B C1                         or eax, ecx

#6		{R:1$7}
(*) BOOL
055E2132  33 C9                         xor ecx, ecx
055E2134  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %M110+4
055E213A  0B C1                         or eax, ecx

#7		{R:1$8}
(*) BOOL
055E213C  33 C9                         xor ecx, ecx
055E213E  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %M110+8
055E2144  0B C1                         or eax, ecx

#8		{R:1$9}
(*) BOOL
055E2146  33 C9                         xor ecx, ecx
055E2148  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %M110+6
055E214E  0B C1                         or eax, ecx

#9		{R:1$1}
(*) BOOL
055E2150  84 C0                         test al, al
055E2152  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+21

055E2159  61                            popad
055E215A  5D                            pop ebp

055E215B  C3                            ret

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
055E215C  66 8B 0D CC CC CC CC          mov cx, [CCCCCCCCH] ; %I1+0
055E2163  66 89 0D CC CC CC CC          mov [CCCCCCCCH], cx ; $$DATA$$+26

055E216A  66 8B 0D CC CC CC CC          mov cx, [CCCCCCCCH] ; %I1+2
055E2171  66 89 0D CC CC CC CC          mov [CCCCCCCCH], cx ; $$DATA$$+28

055E2178  66 8B 0D CC CC CC CC          mov cx, [CCCCCCCCH] ; %I1+4
055E217F  66 89 0D CC CC CC CC          mov [CCCCCCCCH], cx ; $$DATA$$+32

055E2186  66 8B 0D CC CC CC CC          mov cx, [CCCCCCCCH] ; %I1+6
055E218D  66 89 0D CC CC CC CC          mov [CCCCCCCCH], cx ; $$DATA$$+34

055E2194  66 8B 0D CC CC CC CC          mov cx, [CCCCCCCCH] ; %I1+8
055E219B  66 89 0D CC CC CC CC          mov [CCCCCCCCH], cx ; $$DATA$$+52

055E21A2  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+2
055E21A8  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+37

055E21AE  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+1
055E21B4  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+68

055E21BA  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+0
055E21C0  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+69

055E21C6  C3                            ret


*** OUTPUT:
055E21C7  C3                            ret



**************************************************
	Task BACKGROUND init code
**************************************************

055E21C8  55                            push ebp
055E21C9  8B EC                         mov ebp, esp

055E21CB  C6 05 CC CC CC CC 01          mov byte ptr [CCCCCCCCH], 01H ; $$DATA$$+22

055E21D2  8B E5                         mov esp, ebp
055E21D4  5D                            pop ebp

055E21D5  C3                            ret


**************************************************
VIRTUAL TABLES:

--------------------------------------------------------
VIRTUAL TABLES INDEXES
--------------------------------------------------------


**************************************************
	Global init code
**************************************************

055E21F0  55                            push ebp
055E21F1  8B EC                         mov ebp, esp

055E21F3  8B E5                         mov esp, ebp
055E21F5  5D                            pop ebp

055E21F6  C3                            ret



**************************************************
	Global RETAIN init code
**************************************************

055E21F7  55                            push ebp
055E21F8  8B EC                         mov ebp, esp

055E21FA  8B E5                         mov esp, ebp
055E21FC  5D                            pop ebp

055E21FD  C3                            ret



**************************************************
	Task $$VirtualTables init code
**************************************************

055E21FE  55                            push ebp
055E21FF  8B EC                         mov ebp, esp

055E2201  8B E5                         mov esp, ebp
055E2203  5D                            pop ebp

055E2204  C3                            ret



********************************************
MEMORY MAP
********************************************

Code area type:			main code
Start code area:		 55E0020h
End code area:			 55E2210h
Code size:			    21F0h

Start local data area:		 2C60020h
End local data area:		 2C6007Eh
Local data size:		      5Eh

Start retentive data area:	       0h
End retentive data area:	       0h
Retentive data size:		       0h

Start bit data area:		       0h
End bit data area:		       0h
Bit data size:			       0h



********************************************
CODE ID:                                947536D0
DEBUG MEMO ID:                          0000B332
FULL MEMO ID:                           0000A5D2
RELOCATION ADDR:                        055E0020
********************************************
