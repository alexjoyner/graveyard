***********************************************************************
*
*	CODE GENERATION LISTING FOR: Oklahoma_HMI
*	COMPILER VERSION: 2.2.0
*
***********************************************************************

***********************************************************************
UNUSED FUNCTIONS:

	BITTOWORD
	BITTOBYTE
	BYTETOWORD
	F_MATRIXREADBYTE
***********************************************************************

***********************************************************************
UNUSED FUNCTION BLOCKS:

	PULSE
	FF_D
	BYTETOBIT
	WORDTOBIT
	WORDTOBYTE
	CTD
	CTD_DINT
	CTD_UDINT
	CTU
	CTU_DINT
	CTU_UDINT
	CTUD
	CTUD_DINT
	CTUD_UDINT
	TOF
	TP
	SR
	RS
	F_TRIG
	YEARLYEVENT
	WEEKSCHEDULE
	THREEPOINTACTUATOR
	STEPCONTROLLERANALOG
	PIDAUTOTUNING
	PIDADVANCED
	OPERATINGHOURS
	DAYLIGHTSAVING
	FB_SETMASKINGPATTERN
	FB_SETFORMATINFOPATTERN
	FB_SETFINDERPATTERN
	FB_SETBITSTREAM
	FB_SETALIGNMENTPATTERN
	FB_MATRIXWRITEBYTE
	FB_GETRSCODEWORD
	QRCODEGENERATOR
	ECFANMGMT
	PSYCHROMETRIC
	AHUTEMPCNTRLSTRATEGY
	AHUPLANTMODESTRATEGY
	REDUNDANTPUMPCNTRL
	COPCALCULATION
	THERMALPOWERCALCULATION
	PULSE2COUNTER
	COUNTER2ENERGY
	FLOATINGHIGHPRESCNTRL
	COMPMGMTVS
	THERMALPOWER_ENTHALPY
	DOUBLEINTERPO_5X8
	FLUID_DENSITY
	FLUID_ENTHALPY
	TEMP2PRESS
	PRESS2TEMP
	FANMGMT
	COMPMGMT
	COMPCNTRL_SLIDER
	COMPCNTRL_VS
	COMPCNTRL_ONOFF
	COMPAPPLIMIT
	COMPALARMMGMT
	ATV71MODBUSCOM
	ATV61MODBUSCOM
	ATV32MODBUSCOM
	ATV31MODBUSCOM
	ATV312MODBUSCOM
	ATV21MODBUSCOM
	ATV212MODBUSCOM
	ATV12MODBUSCOM
	AUXPUMPCTRL
	CAVTPROT
	COMPSP
	COMPSPFLOW
	DEVSWCPUMPCTRL
	FSPUMPCTRL
	OPINTAUXPUMP
	OPINTPUMP
	OPPRTY
	PID_PARA_CHECK
	PIPEFILL
	PUMPAVAI
	PUMPFBCKMAPP
	PUMPPID
	PUMPPIDSTAG
	VSDAVAI
	VSDCTRL
	VSDNU
	VSPUMPCTRL
***********************************************************************

**************************************************
	List function block: R_TRIG
**************************************************

FUNCTION_BLOCK R_TRIG

	{ DE:"Rising edge detector" }

        VAR_INPUT
CLK : BOOL;	{ DE:"Clock" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Out" }
	END_VAR

        VAR
M : BOOL := TRUE;
	END_VAR

END_FUNCTION_BLOCK

05551E00  55                            push ebp
05551E01  8B EB                         mov ebp, ebx

#0		{SRC:R_TRIG}
#1
#2
(*) UNDEF
05551E03  33 C0                         xor eax, eax
05551E05  8A 45 01                      mov al, 1[ebp]

#3
(*) BOOL
05551E08  33 C9                         xor ecx, ecx
05551E0A  8A 4D 00                      mov cl, [ebp]
05551E0D  84 C9                         test cl, cl
05551E0F  0F 94 C1                      sete cl
05551E12  23 C1                         and eax, ecx

#4
(*) BOOL
05551E14  84 C0                         test al, al
05551E16  0F 95 45 02                   setne 2[ebp]

#5
#6
(*) UNDEF
05551E1A  33 C0                         xor eax, eax
05551E1C  8A 45 01                      mov al, 1[ebp]

#7
(*) BOOL
05551E1F  84 C0                         test al, al
05551E21  0F 95 45 00                   setne [ebp]

05551E25  5D                            pop ebp

05551E26  C3                            ret


Frame allocation:

	0000 bit  0: VAR M
	0001 bit  0: VAR CLK
	0002 bit  0: VAR Q

END_FUNCTION_BLOCK
**************************************************
	List function block: TON
**************************************************

FUNCTION_BLOCK TON

	{ DE:"On-delay timer" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value [ms]" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value [ms]" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
SYSTIMER AT %MD0.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
TIMSTART : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

05551E27  55                            push ebp
05551E28  8B EB                         mov ebp, ebx

#0		{SRC:TON}
#1
#2
#3
#4
(*) UNDEF
05551E2A  33 C0                         xor eax, eax
05551E2C  8A 45 04                      mov al, 4[ebp]

#5
(-) BOOL
05551E2F  84 C0                         test al, al
05551E31  90 74 61 90 90 90             je 05551E95H

#6
#7
#8
(*) UNDEF
05551E37  33 C0                         xor eax, eax
05551E39  8A 45 09                      mov al, 9[ebp]

#9
(-) BOOL
05551E3C  84 C0                         test al, al
05551E3E  90 75 4F 90 90 90             jne 05551E90H

#10
#11
#12
(*) UNDEF
05551E44  8B 45 00                      mov eax, [ebp]

#13
(*) UDINT
05551E47  3D 00 00 00 00                cmp eax, 0
05551E4C  0F 94 C0                      sete al
05551E4F  25 FF 00 00 00                and eax, 0FFh

#14
(-) BOOL
05551E54  84 C0                         test al, al
05551E56  90 74 0C 90 90 90             je 05551E65H

#15
#16
#17
(*) UNDEF
05551E5C  8B 05 CC CC CC CC             mov eax, [CCCCCCCCH] ; %M0+0

#18
(*) UDINT
05551E62  89 45 00                      mov [ebp], eax

#19
#20
#21
#22
#23
(*) UNDEF
05551E65  8B 05 CC CC CC CC             mov eax, [CCCCCCCCH] ; %M0+0

#24
(*) UDINT
05551E6B  2B 45 00                      sub eax, [ebp]

#25
(*) UDINT
05551E6E  89 45 0A                      mov 10[ebp], eax

#26
(*) UDINT
05551E71  3B 45 05                      cmp eax, [ebp+5]
05551E74  0F 93 C0                      setae al
05551E77  25 FF 00 00 00                and eax, 0FFh

#27
(*) BOOL
05551E7C  84 C0                         test al, al
05551E7E  0F 95 45 09                   setne 9[ebp]

#28
(-) BOOL
05551E82  84 C0                         test al, al
05551E84  90 74 09 90 90 90             je 05551E90H

#29
#30
#31
(*) UNDEF
05551E8A  8B 45 05                      mov eax, 5[ebp]

#32
(*) UDINT
05551E8D  89 45 0A                      mov 10[ebp], eax

#33
#34
#35
#36
#37
(-) UDINT
05551E90  EB 19 90 90 90                jmp 05551EABH

#38
#39
#40
#41
(*) UNDEF
05551E95  B8 00 00 00 00                mov eax, 0

#42
(*) USINT
05551E9A  89 45 0A                      mov 10[ebp], eax

#43
(*) UDINT
05551E9D  89 45 00                      mov [ebp], eax

#44
(*) UNDEF
05551EA0  B8 00 00 00 00                mov eax, 0

#45
(*) BOOL
05551EA5  84 C0                         test al, al
05551EA7  0F 95 45 09                   setne 9[ebp]

05551EAB  5D                            pop ebp

05551EAC  C3                            ret


Frame allocation:

	0000       : VAR TIMSTART
	0004 bit  0: VAR IN
	0005       : VAR PT
	0009 bit  0: VAR Q
	000A       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List program: INITPARDB
**************************************************

PROGRAM INITPARDB

        VAR
WARNINGSKILLER : USINT;
DUMMYCRC32 : UDINT;
	END_VAR

END_PROGRAM

05551EB0  55                            push ebp
05551EB1  8B EC                         mov ebp, esp
05551EB3  60                            pushad

#0		{SRC:INITPARDB}
#1
#2
#3
#4		{L:3}
(*) UDINT
05551EB4  B8 70 22 D3 81                mov eax, 2178097776
05551EB9  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+12

#5
#6
#7		{L:5}
(*) UDINT
05551EBF  B8 CC CC CC CC                mov eax, CCCCCCCCH ; $$CODE$$+4830

#8		{L:5}
(*) @UDINT
05551EC4  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+76

#9		{L:5}
(*) UNDEF
05551ECA  8B 05 CC CC CC CC             mov eax, [CCCCCCCCH] ; $$DATA$$+76

#10		{L:5}
(-) @UDINT
05551ED0  68 0E 00 00 00                push 14
05551ED5  50                            push eax
05551ED6  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; SYSDBASE_SETEXTTABLE
05551EDB  FF D1                         call ecx
05551EDD  81 C4 08 00 00 00             add esp, 8

#11		{L:5}
(*) USINT
05551EE3  88 05 CC CC CC CC             mov [CCCCCCCCH], al ; $$DATA$$+20

05551EE9  61                            popad
05551EEA  5D                            pop ebp

05551EEB  C3                            ret

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
05551EEC  C3                            ret


*** OUTPUT:
05551EED  C3                            ret



**************************************************
	Task SERV init code
**************************************************

05551EEE  55                            push ebp
05551EEF  8B EC                         mov ebp, esp

05551EF1  8B E5                         mov esp, ebp
05551EF3  5D                            pop ebp

05551EF4  C3                            ret

**************************************************
	List program: RESET_ALARMS
**************************************************

PROGRAM RESET_ALARMS

END_PROGRAM

05551F00  55                            push ebp
05551F01  8B EC                         mov ebp, esp
05551F03  60                            pushad

#0		{SRC:RESET_ALARMS}
#1
#2
#3
#4
#5		{L:1}
(*) UNDEF
05551F04  33 C0                         xor eax, eax
05551F06  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %M110+10

#6		{L:1}
(-) BOOL
05551F0C  84 C0                         test al, al
05551F0E  90 74 57 90 90 90             je 05551F68H

#7
#8
#9
#10
#11		{L:2}
(*) BOOL
05551F14  B8 00 00 00 00                mov eax, 0
05551F19  84 C0                         test al, al
05551F1B  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %M110+0

#12
#13
#14		{L:3}
(*) BOOL
05551F22  B8 00 00 00 00                mov eax, 0
05551F27  84 C0                         test al, al
05551F29  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %M110+2

#15
#16
#17		{L:4}
(*) BOOL
05551F30  B8 00 00 00 00                mov eax, 0
05551F35  84 C0                         test al, al
05551F37  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %M110+4

#18
#19
#20		{L:5}
(*) BOOL
05551F3E  B8 00 00 00 00                mov eax, 0
05551F43  84 C0                         test al, al
05551F45  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %M110+6

#21
#22
#23		{L:6}
(*) BOOL
05551F4C  B8 00 00 00 00                mov eax, 0
05551F51  84 C0                         test al, al
05551F53  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %M110+8

#24
#25
#26		{L:7}
(*) BOOL
05551F5A  B8 00 00 00 00                mov eax, 0
05551F5F  84 C0                         test al, al
05551F61  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

END_PROGRAM
**************************************************
	List program: SILENCE_ALARMS
**************************************************

PROGRAM SILENCE_ALARMS

END_PROGRAM

#0		{SRC:SILENCE_ALARMS}
#1
#2
#3
#4
#5		{L:1}
(*) UNDEF
05551F68  33 C0                         xor eax, eax
05551F6A  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %M110+12

#6		{L:1}
(-) BOOL
05551F70  84 C0                         test al, al
05551F72  90 74 11 90 90 90             je 05551F86H

#7
#8
#9
#10
#11		{L:2}
(*) BOOL
05551F78  B8 00 00 00 00                mov eax, 0
05551F7D  84 C0                         test al, al
05551F7F  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

END_PROGRAM
**************************************************
	List program: AUDIBLE_ALARM_CTRL
**************************************************

PROGRAM AUDIBLE_ALARM_CTRL

        VAR
ONESHOT : R_TRIG;
	END_VAR

END_PROGRAM

#0		{SRC:AUDIBLE_ALARM_CTRL}
#1
#2
#3
#4		{L:3}
(*) UDINT
05551F86  33 C0                         xor eax, eax
05551F88  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+21
05551F8E  84 C0                         test al, al
05551F90  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+23

#5		{L:3}
(*) BOOL
05551F97  50                            push eax
05551F98  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+22
05551F9D  E8 5E FE FF FF                call 05551E00H
05551FA2  58                            pop eax

#6
#7
#8
#9		{L:4}
(*) UNDEF
05551FA3  33 C0                         xor eax, eax
05551FA5  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+24

#10		{L:4}
(-) BOOL
05551FAB  84 C0                         test al, al
05551FAD  90 74 11 90 90 90             je 05551FC1H

#11
#12
#13
#14
#15		{L:5}
(*) BOOL
05551FB3  B8 01 00 00 00                mov eax, 1
05551FB8  84 C0                         test al, al
05551FBA  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

END_PROGRAM
**************************************************
	List program: HIGHRTD
**************************************************

PROGRAM HIGHRTD

        VAR
HIGHRTDTIMER : TON;
HIGHRTDTIMERVAL : UDINT;
SENSORSDISCONNECT : BOOL;
	END_VAR

        VAR CONSTANT
DISCONNECTVAL : INT := -32768;
	END_VAR

END_PROGRAM

#0		{SRC:HIGHRTD}
#1
#2
#3
#4
#5
#6		{R:"1$O:15"}
(*) UNDEF
05551FC1  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+26

#7		{R:"1$O:15"}
(*) INT
05551FC8  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+16
05551FCF  3B C1                         cmp eax, ecx
05551FD1  0F 9D C0                      setge al
05551FD4  25 FF 00 00 00                and eax, 0FFh

#8
#9		{R:"1$O:15"}
(*) BOOL
05551FD9  84 C0                         test al, al
05551FDB  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+80

#10		{R:"1$O:14"}
(*) UNDEF
05551FE2  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+28

#11		{R:"1$O:14"}
(*) INT
05551FE9  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+18
05551FF0  3B C1                         cmp eax, ecx
05551FF2  0F 9D C0                      setge al
05551FF5  25 FF 00 00 00                and eax, 0FFh

#12
#13		{R:"1$O:14"}
(*) BOOL
05551FFA  84 C0                         test al, al
05551FFC  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+81

#14		{R:"1$O:11"}
(*) UNDEF
05552003  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+32

#15		{R:"1$O:11"}
(*) INT
0555200A  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+26
05552011  3B C1                         cmp eax, ecx
05552013  0F 9D C0                      setge al
05552016  25 FF 00 00 00                and eax, 0FFh

#16
#17		{R:"1$O:11"}
(*) BOOL
0555201B  84 C0                         test al, al
0555201D  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+82

#18		{R:"1$O:17"}
(*) UNDEF
05552024  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+34

#19		{R:"1$O:17"}
(*) INT
0555202B  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+14
05552032  3B C1                         cmp eax, ecx
05552034  0F 9D C0                      setge al
05552037  25 FF 00 00 00                and eax, 0FFh

#20
#21		{R:"1$O:17"}
(*) BOOL
0555203C  84 C0                         test al, al
0555203E  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+83

#22		{R:"1$O:12"}
(*) UNDEF
05552045  33 C0                         xor eax, eax
05552047  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+80

#23		{R:"1$O:12"}
(*) BOOL
0555204D  33 C9                         xor ecx, ecx
0555204F  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+81
05552055  0B C1                         or eax, ecx

#24
#25		{R:"1$O:13"}
(*) BOOL
05552057  33 C9                         xor ecx, ecx
05552059  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+82
0555205F  0B C1                         or eax, ecx

#26
#27		{R:"1$O:16"}
(*) BOOL
05552061  33 C9                         xor ecx, ecx
05552063  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+83
05552069  0B C1                         or eax, ecx

#28
#29		{R:"1$O:18"}
(*) BOOL
0555206B  33 C9                         xor ecx, ecx
0555206D  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+37
05552073  0B C1                         or eax, ecx

#30		{R:"1$O:18"}
(*) BOOL
05552075  84 C0                         test al, al
05552077  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+42

#31
#32
#33		{R:"1$FB:HIGHRTDTIMER"}
(*) BOOL
0555207E  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M110+22
05552085  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+43

#34		{R:"1$FB:HIGHRTDTIMER"}
(*) INT
0555208B  50                            push eax
0555208C  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+38
05552091  E8 91 FD FF FF                call 05551E27H
05552096  58                            pop eax

#35		{R:"1$FB:HIGHRTDTIMER"}
(*) INT
05552097  33 C0                         xor eax, eax
05552099  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+47
0555209F  84 C0                         test al, al
055520A1  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %M110+8

#36
#37
#38
#39
#40
#41
#42		{R:"2$O:6"}
(*) UNDEF
055520A8  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+26

#43		{R:"2$O:6"}
(*) INT
055520AF  3D 00 80 FF FF                cmp eax, -32768
055520B4  0F 94 C0                      sete al
055520B7  25 FF 00 00 00                and eax, 0FFh

#44
#45		{R:"2$O:6"}
(*) BOOL
055520BC  84 C0                         test al, al
055520BE  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+84

#46		{R:"2$O:7"}
(*) UNDEF
055520C5  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+28

#47		{R:"2$O:7"}
(*) INT
055520CC  3D 00 80 FF FF                cmp eax, -32768
055520D1  0F 94 C0                      sete al
055520D4  25 FF 00 00 00                and eax, 0FFh

#48
#49		{R:"2$O:7"}
(*) BOOL
055520D9  84 C0                         test al, al
055520DB  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+85

#50		{R:"2$O:8"}
(*) UNDEF
055520E2  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+32

#51		{R:"2$O:8"}
(*) INT
055520E9  3D 00 80 FF FF                cmp eax, -32768
055520EE  0F 94 C0                      sete al
055520F1  25 FF 00 00 00                and eax, 0FFh

#52
#53		{R:"2$O:8"}
(*) BOOL
055520F6  84 C0                         test al, al
055520F8  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+86

#54		{R:"2$O:5"}
(*) UNDEF
055520FF  33 C0                         xor eax, eax
05552101  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+84

#55		{R:"2$O:5"}
(*) BOOL
05552107  33 C9                         xor ecx, ecx
05552109  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+85
0555210F  0B C1                         or eax, ecx

#56
#57		{R:"2$O:11"}
(*) BOOL
05552111  33 C9                         xor ecx, ecx
05552113  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+86
05552119  0B C1                         or eax, ecx

#58		{R:"2$O:11"}
(*) BOOL
0555211B  84 C0                         test al, al
0555211D  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+37

END_PROGRAM
**************************************************
	List program: VIBRATIONALARMCALC
**************************************************

PROGRAM VIBRATIONALARMCALC

        VAR
VIBRATIONALARM_0 : TON;
	END_VAR

END_PROGRAM

#0		{SRC:VIBRATIONALARMCALC}
#1
#2
#3
#4
#5
#6		{R:"1$O:7"}
(*) UNDEF
05552124  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+56

#7		{R:"1$O:7"}
(*) INT
0555212B  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+20
05552132  3B C1                         cmp eax, ecx
05552134  0F 9D C0                      setge al
05552137  25 FF 00 00 00                and eax, 0FFh

#8		{R:"1$O:7"}
(*) BOOL
0555213C  84 C0                         test al, al
0555213E  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+62

#9
#10
#11		{R:"1$FB:VIBRATIONALARM_0"}
(*) BOOL
05552145  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M110+24
0555214C  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+63

#12		{R:"1$FB:VIBRATIONALARM_0"}
(*) INT
05552152  50                            push eax
05552153  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+58
05552158  E8 CA FC FF FF                call 05551E27H
0555215D  58                            pop eax

#13		{R:"1$FB:VIBRATIONALARM_0"}
(*) INT
0555215E  33 C0                         xor eax, eax
05552160  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+67
05552166  84 C0                         test al, al
05552168  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %M110+6

END_PROGRAM
**************************************************
	List program: HIGHFLOATDETECT
**************************************************

PROGRAM HIGHFLOATDETECT

END_PROGRAM

#0		{SRC:HIGHFLOATDETECT}
#1
#2
#3
#4		{R:1$0}
(*) UNDEF
0555216F  33 C0                         xor eax, eax
05552171  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+55

#5		{R:1$1}
(*) BOOL
05552177  84 C0                         test al, al
05552179  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %M110+4

END_PROGRAM
**************************************************
	List program: SEALFAILDETECT
**************************************************

PROGRAM SEALFAILDETECT

END_PROGRAM

#0		{SRC:SEALFAILDETECT}
#1
#2
#3
#4		{R:1$0}
(*) UNDEF
05552180  33 C0                         xor eax, eax
05552182  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+72
05552188  84 C0                         test al, al
0555218A  0F 94 C0                      sete al

#5		{R:1$1}
(*) BOOL
0555218D  84 C0                         test al, al
0555218F  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %M110+2

END_PROGRAM
**************************************************
	List program: ENABLEAUDIBLEALARM
**************************************************

PROGRAM ENABLEAUDIBLEALARM

END_PROGRAM

#0		{SRC:ENABLEAUDIBLEALARM}
#1
#2
#3
#4		{R:1$0}
(*) UNDEF
05552196  33 C0                         xor eax, eax
05552198  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %M110+0

#5		{R:1$5}
(*) BOOL
0555219E  33 C9                         xor ecx, ecx
055521A0  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %M110+2
055521A6  0B C1                         or eax, ecx

#6		{R:1$7}
(*) BOOL
055521A8  33 C9                         xor ecx, ecx
055521AA  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %M110+4
055521B0  0B C1                         or eax, ecx

#7		{R:1$8}
(*) BOOL
055521B2  33 C9                         xor ecx, ecx
055521B4  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %M110+8
055521BA  0B C1                         or eax, ecx

#8		{R:1$9}
(*) BOOL
055521BC  33 C9                         xor ecx, ecx
055521BE  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %M110+6
055521C4  0B C1                         or eax, ecx

#9		{R:1$1}
(*) BOOL
055521C6  84 C0                         test al, al
055521C8  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+21

END_PROGRAM
**************************************************
	List program: PUMP_ENABLE
**************************************************

PROGRAM PUMP_ENABLE

END_PROGRAM

#0		{SRC:PUMP_ENABLE}
#1
#2
#3
#4		{R:1$0}
(*) UNDEF
055521CF  33 C0                         xor eax, eax
055521D1  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+21
055521D7  84 C0                         test al, al
055521D9  0F 94 C0                      sete al

#5		{R:1$1}
(*) BOOL
055521DC  84 C0                         test al, al
055521DE  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

END_PROGRAM
**************************************************
	List program: WINDINGTEMPDETECT
**************************************************

PROGRAM WINDINGTEMPDETECT

        VAR CONSTANT
WINDINGTEMPCUTOFF : INT := 402;
WINDINGTEMPDISCONNECT : INT := -32768;
	END_VAR

END_PROGRAM

#0		{SRC:WINDINGTEMPDETECT}
#1
#2
#3
#4
#5
#6		{R:"1$O:3"}
(*) UNDEF
055521E5  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+74

#7		{R:"1$O:3"}
(*) INT
055521EC  3D 92 01 00 00                cmp eax, 402
055521F1  0F 9D C0                      setge al
055521F4  25 FF 00 00 00                and eax, 0FFh

#8
#9		{R:"1$O:3"}
(*) BOOL
055521F9  84 C0                         test al, al
055521FB  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+87

#10		{R:"1$O:7"}
(*) UNDEF
05552202  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+74

#11		{R:"1$O:7"}
(*) INT
05552209  3D 00 80 FF FF                cmp eax, -32768
0555220E  0F 94 C0                      sete al
05552211  25 FF 00 00 00                and eax, 0FFh

#12
#13		{R:"1$O:7"}
(*) BOOL
05552216  84 C0                         test al, al
05552218  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+88

#14		{R:"1$O:8"}
(*) UNDEF
0555221F  33 C0                         xor eax, eax
05552221  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+87

#15		{R:"1$O:8"}
(*) BOOL
05552227  33 C9                         xor ecx, ecx
05552229  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+88
0555222F  0B C1                         or eax, ecx

#16		{R:"1$O:8"}
(*) BOOL
05552231  84 C0                         test al, al
05552233  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %M110+0

0555223A  61                            popad
0555223B  5D                            pop ebp

0555223C  C3                            ret

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
0555223D  66 8B 0D CC CC CC CC          mov cx, [CCCCCCCCH] ; %I1+0
05552244  66 89 0D CC CC CC CC          mov [CCCCCCCCH], cx ; $$DATA$$+26

0555224B  66 8B 0D CC CC CC CC          mov cx, [CCCCCCCCH] ; %I1+2
05552252  66 89 0D CC CC CC CC          mov [CCCCCCCCH], cx ; $$DATA$$+28

05552259  66 8B 0D CC CC CC CC          mov cx, [CCCCCCCCH] ; %I1+4
05552260  66 89 0D CC CC CC CC          mov [CCCCCCCCH], cx ; $$DATA$$+32

05552267  66 8B 0D CC CC CC CC          mov cx, [CCCCCCCCH] ; %I1+6
0555226E  66 89 0D CC CC CC CC          mov [CCCCCCCCH], cx ; $$DATA$$+34

05552275  66 8B 0D CC CC CC CC          mov cx, [CCCCCCCCH] ; %I1+12
0555227C  66 89 0D CC CC CC CC          mov [CCCCCCCCH], cx ; $$DATA$$+56

05552283  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+1
05552289  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+55

0555228F  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+0
05552295  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+72

0555229B  66 8B 0D CC CC CC CC          mov cx, [CCCCCCCCH] ; %I1+8
055522A2  66 89 0D CC CC CC CC          mov [CCCCCCCCH], cx ; $$DATA$$+74

055522A9  C3                            ret


*** OUTPUT:
055522AA  C3                            ret



**************************************************
	Task BACKGROUND init code
**************************************************

055522AB  55                            push ebp
055522AC  8B EC                         mov ebp, esp

055522AE  C6 05 CC CC CC CC 01          mov byte ptr [CCCCCCCCH], 01H ; $$DATA$$+22

055522B5  8B E5                         mov esp, ebp
055522B7  5D                            pop ebp

055522B8  C3                            ret


**************************************************
VIRTUAL TABLES:

--------------------------------------------------------
VIRTUAL TABLES INDEXES
--------------------------------------------------------


**************************************************
	Global init code
**************************************************

055522D0  55                            push ebp
055522D1  8B EC                         mov ebp, esp

055522D3  8B E5                         mov esp, ebp
055522D5  5D                            pop ebp

055522D6  C3                            ret



**************************************************
	Global RETAIN init code
**************************************************

055522D7  55                            push ebp
055522D8  8B EC                         mov ebp, esp

055522DA  8B E5                         mov esp, ebp
055522DC  5D                            pop ebp

055522DD  C3                            ret



**************************************************
	Task $$VirtualTables init code
**************************************************

055522DE  55                            push ebp
055522DF  8B EC                         mov ebp, esp

055522E1  8B E5                         mov esp, ebp
055522E3  5D                            pop ebp

055522E4  C3                            ret



********************************************
MEMORY MAP
********************************************

Code area type:			main code
Start code area:		 5550020h
End code area:			 55522F0h
Code size:			    22D0h

Start local data area:		 2C30020h
End local data area:		 2C30079h
Local data size:		      59h

Start retentive data area:	       0h
End retentive data area:	       0h
Retentive data size:		       0h

Start bit data area:		       0h
End bit data area:		       0h
Bit data size:			       0h



********************************************
CODE ID:                                18D64914
DEBUG MEMO ID:                          0000B332
FULL MEMO ID:                           00009E52
RELOCATION ADDR:                        05550020
********************************************
