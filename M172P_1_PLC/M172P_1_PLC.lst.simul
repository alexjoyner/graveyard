***********************************************************************
*
*	CODE GENERATION LISTING FOR: M172P_1_PLC
*	COMPILER VERSION: 2.0.2
*
***********************************************************************

***********************************************************************
UNUSED FUNCTIONS:

	BITTOWORD
	BITTOBYTE
	BYTETOWORD
***********************************************************************

***********************************************************************
UNUSED FUNCTION BLOCKS:

	PULSE
	FF_D
	BYTETOBIT
	WORDTOBIT
	WORDTOBYTE
	CTD
	CTD_DINT
	CTD_UDINT
	CTU
	CTU_DINT
	CTU_UDINT
	CTUD
	CTUD_DINT
	CTUD_UDINT
	TOF
	TON
	TP
	SR
	RS
	R_TRIG
	F_TRIG
	DAYLIGHTSAVING
	OPERATINGHOURS
	PIDADVANCED
	PIDAUTOTUNING
	STEPCONTROLLERANALOG
	THREEPOINTACTUATOR
	AHUPLANTMODESTRATEGY
	AHUTEMPCNTRLSTRATEGY
	PSYCHROMETRIC
	COPCALCULATION
	COUNTER2ENERGY
	PULSE2COUNTER
	THERMALPOWERCALCULATION
	COMPALARMMGMT
	COMPAPPLIMIT
	COMPCNTRL_ONOFF
	COMPCNTRL_SLIDER
	COMPCNTRL_VS
	COMPMGMT
	DOUBLEINTERPO_5X8
	FANMGMT
	FLOATINGHIGHPRESCNTRL
	FLUID_DENSITY
	FLUID_ENTHALPY
	THERMALPOWER_ENTHALPY
	PRESS2TEMP
	TEMP2PRESS
	REDUNDANTPUMPCNTRL
	ATV12MODBUSCOM
	ATV212MODBUSCOM
	ATV21MODBUSCOM
	ATV312MODBUSCOM
	ATV31MODBUSCOM
	ATV32MODBUSCOM
	ATV61MODBUSCOM
	ATV71MODBUSCOM
	AUXPUMPCTRL
	CAVTPROT
	COMPSP
	COMPSPFLOW
	DEVSWCPUMPCTRL
	FSPUMPCTRL
	OPINTAUXPUMP
	OPINTPUMP
	OPPRTY
	PID_PARA_CHECK
	PIPEFILL
	PUMPAVAI
	PUMPFBCKMAPP
	PUMPPID
	PUMPPIDSTAG
	VSDAVAI
	VSDCTRL
	VSDNU
	VSPUMPCTRL
***********************************************************************

**************************************************
	List program: INITPARDB
**************************************************

PROGRAM INITPARDB

	VAR
	WARNINGSKILLER : USINT; 
	DUMMYCRC32 : UDINT; 
	END_VAR

END_PROGRAM

04D70FC0  55                            push ebp
04D70FC1  8B EC                         mov ebp, esp
04D70FC3  60                            pushad

#0		{SRC:INITPARDB}
#1
#2
#3
#4		{L:3}
(*) UDINT
04D70FC4  B8 B7 35 29 35                mov eax, 891893175
04D70FC9  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+8

#5
#6
#7		{L:5}
(*) UDINT
04D70FCF  B8 CC CC CC CC                mov eax, CCCCCCCCH ; $$CODE$$+192

#8		{L:5}
(*) DWORD
04D70FD4  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+12

#9		{L:5}
(*) UNDEF
04D70FDA  8B 05 CC CC CC CC             mov eax, [CCCCCCCCH] ; $$DATA$$+12

#10		{L:5}
(-) UDINT
04D70FE0  68 2A 00 00 00                push 42
04D70FE5  50                            push eax
04D70FE6  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; SYSDBASE_SETEXTTABLE
04D70FEB  FF D1                         call ecx
04D70FED  81 C4 08 00 00 00             add esp, 8

#11		{L:5}
(*) USINT
04D70FF3  88 05 CC CC CC CC             mov [CCCCCCCCH], al ; $$DATA$$+16

04D70FF9  61                            popad
04D70FFA  5D                            pop ebp

04D70FFB  C3                            ret

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
04D70FFC  C3                            ret


*** OUTPUT:
04D70FFD  C3                            ret



**************************************************
	Task SERV init code
**************************************************

04D70FFE  55                            push ebp
04D70FFF  8B EC                         mov ebp, esp

04D71001  8B E5                         mov esp, ebp
04D71003  5D                            pop ebp

04D71004  C3                            ret

**************************************************
	List program: MAIN
**************************************************

PROGRAM MAIN

END_PROGRAM

04D71010  55                            push ebp
04D71011  8B EC                         mov ebp, esp
04D71013  60                            pushad

#0		{SRC:MAIN}
#1
#2
#3
#4		{L:2}
(*) UNDEF
04D71014  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+18

#5		{L:2}
(*) INT
04D7101B  05 01 00 00 00                add eax, 1

#6		{L:2}
(*) INT
04D71020  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+18

04D71027  61                            popad
04D71028  5D                            pop ebp

04D71029  C3                            ret

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
04D7102A  C3                            ret


*** OUTPUT:
04D7102B  C3                            ret



**************************************************
	Task BACKGROUND init code
**************************************************

04D7102C  55                            push ebp
04D7102D  8B EC                         mov ebp, esp

04D7102F  8B E5                         mov esp, ebp
04D71031  5D                            pop ebp

04D71032  C3                            ret

**************************************************
	List program: LADDER
**************************************************

PROGRAM LADDER

END_PROGRAM

04D71040  55                            push ebp
04D71041  8B EC                         mov ebp, esp
04D71043  60                            pushad

#0		{SRC:LADDER}
#1
#2
#3
#4		{R:1$4}
(*) UNDEF
04D71044  33 C0                         xor eax, eax
04D71046  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+17

#5
#6
#7
(*) UNDEF
04D7104C  B8 01 00 00 00                mov eax, 1

END_PROGRAM
**************************************************
	List program: ANALOGINPUTPLCTOAP
**************************************************

PROGRAM ANALOGINPUTPLCTOAP

END_PROGRAM

#0		{SRC:ANALOGINPUTPLCTOAP}
#1
#2
#3
#4		{R:1$3}
(*) UNDEF
04D71051  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+20

#5		{R:1$4}
(*) INT
04D71058  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+0

#6
(*) UNDEF
04D7105F  B8 01 00 00 00                mov eax, 1

#7
#8
#9		{R:2$3}
(*) UNDEF
04D71064  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+22

#10		{R:2$4}
(*) INT
04D7106B  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+2

#11
(*) UNDEF
04D71072  B8 01 00 00 00                mov eax, 1

#12
#13
#14		{R:3$4}
(*) UNDEF
04D71077  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+24

#15		{R:3$5}
(*) INT
04D7107E  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+4

#16
(*) UNDEF
04D71085  B8 01 00 00 00                mov eax, 1

#17
#18
#19		{R:4$3}
(*) UNDEF
04D7108A  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+26

#20		{R:4$4}
(*) INT
04D71091  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+6

#21
(*) UNDEF
04D71098  B8 01 00 00 00                mov eax, 1

#22
#23
#24		{R:5$6}
(*) UNDEF
04D7109D  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+28

#25		{R:5$7}
(*) INT
04D710A4  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+8

#26
(*) UNDEF
04D710AB  B8 01 00 00 00                mov eax, 1

#27
#28
#29		{R:6$6}
(*) UNDEF
04D710B0  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+30

#30		{R:6$7}
(*) INT
04D710B7  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+10

#31
(*) UNDEF
04D710BE  B8 01 00 00 00                mov eax, 1

#32
#33
#34		{R:7$3}
(*) UNDEF
04D710C3  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+32

#35		{R:7$4}
(*) INT
04D710CA  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+12

#36
(*) UNDEF
04D710D1  B8 01 00 00 00                mov eax, 1

#37
#38
#39		{R:8$3}
(*) UNDEF
04D710D6  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+34

#40		{R:8$4}
(*) INT
04D710DD  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+14

#41
(*) UNDEF
04D710E4  B8 01 00 00 00                mov eax, 1

#42
#43
#44		{R:9$3}
(*) UNDEF
04D710E9  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+36

#45		{R:9$4}
(*) INT
04D710F0  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+16

#46
(*) UNDEF
04D710F7  B8 01 00 00 00                mov eax, 1

#47
#48
#49		{R:10$3}
(*) UNDEF
04D710FC  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+38

#50		{R:10$4}
(*) INT
04D71103  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+18

#51
(*) UNDEF
04D7110A  B8 01 00 00 00                mov eax, 1

#52
#53
#54		{R:11$3}
(*) UNDEF
04D7110F  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+40

#55		{R:11$4}
(*) INT
04D71116  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+20

#56
(*) UNDEF
04D7111D  B8 01 00 00 00                mov eax, 1

#57
#58
#59		{R:12$3}
(*) UNDEF
04D71122  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+42

#60		{R:12$4}
(*) INT
04D71129  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+22

#61
(*) UNDEF
04D71130  B8 01 00 00 00                mov eax, 1

END_PROGRAM
**************************************************
	List program: DIGITALINPUTPLCTOAP
**************************************************

PROGRAM DIGITALINPUTPLCTOAP

END_PROGRAM

#0		{SRC:DIGITALINPUTPLCTOAP}
#1
#2
#3
#4		{R:1$3}
(*) UNDEF
04D71135  33 C0                         xor eax, eax
04D71137  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+44

#5		{R:1$4}
(*) BOOL
04D7113D  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+24

#6
(*) UNDEF
04D71144  B8 01 00 00 00                mov eax, 1

#7
#8
#9		{R:2$3}
(*) UNDEF
04D71149  33 C0                         xor eax, eax
04D7114B  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+45

#10		{R:2$4}
(*) BOOL
04D71151  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+26

#11
(*) UNDEF
04D71158  B8 01 00 00 00                mov eax, 1

#12
#13
#14		{R:3$4}
(*) UNDEF
04D7115D  33 C0                         xor eax, eax
04D7115F  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+17

#15		{R:3$5}
(*) BOOL
04D71165  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+28

#16
(*) UNDEF
04D7116C  B8 01 00 00 00                mov eax, 1

#17
#18
#19		{R:4$3}
(*) UNDEF
04D71171  33 C0                         xor eax, eax
04D71173  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+46

#20		{R:4$4}
(*) BOOL
04D71179  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+30

#21
(*) UNDEF
04D71180  B8 01 00 00 00                mov eax, 1

#22
#23
#24		{R:5$6}
(*) UNDEF
04D71185  33 C0                         xor eax, eax
04D71187  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+47

#25		{R:5$7}
(*) BOOL
04D7118D  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+32

#26
(*) UNDEF
04D71194  B8 01 00 00 00                mov eax, 1

#27
#28
#29		{R:6$6}
(*) UNDEF
04D71199  33 C0                         xor eax, eax
04D7119B  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+48

#30		{R:6$7}
(*) BOOL
04D711A1  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+34

#31
(*) UNDEF
04D711A8  B8 01 00 00 00                mov eax, 1

#32
#33
#34		{R:7$3}
(*) UNDEF
04D711AD  33 C0                         xor eax, eax
04D711AF  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+49

#35		{R:7$4}
(*) BOOL
04D711B5  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+36

#36
(*) UNDEF
04D711BC  B8 01 00 00 00                mov eax, 1

#37
#38
#39		{R:8$3}
(*) UNDEF
04D711C1  33 C0                         xor eax, eax
04D711C3  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+50

#40		{R:8$4}
(*) BOOL
04D711C9  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+38

#41
(*) UNDEF
04D711D0  B8 01 00 00 00                mov eax, 1

#42
#43
#44		{R:9$3}
(*) UNDEF
04D711D5  33 C0                         xor eax, eax
04D711D7  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+51

#45		{R:9$4}
(*) BOOL
04D711DD  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+40

#46
(*) UNDEF
04D711E4  B8 01 00 00 00                mov eax, 1

#47
#48
#49		{R:10$3}
(*) UNDEF
04D711E9  33 C0                         xor eax, eax
04D711EB  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+52

#50		{R:10$4}
(*) BOOL
04D711F1  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+42

#51
(*) UNDEF
04D711F8  B8 01 00 00 00                mov eax, 1

#52
#53
#54		{R:11$3}
(*) UNDEF
04D711FD  33 C0                         xor eax, eax
04D711FF  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+53

#55		{R:11$4}
(*) BOOL
04D71205  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+44

#56
(*) UNDEF
04D7120C  B8 01 00 00 00                mov eax, 1

#57
#58
#59		{R:12$3}
(*) UNDEF
04D71211  33 C0                         xor eax, eax
04D71213  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+54

#60		{R:12$4}
(*) BOOL
04D71219  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+46

#61
(*) UNDEF
04D71220  B8 01 00 00 00                mov eax, 1

04D71225  61                            popad
04D71226  5D                            pop ebp

04D71227  C3                            ret

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
04D71228  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+2
04D7122E  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+17

04D71234  66 8B 0D CC CC CC CC          mov cx, [CCCCCCCCH] ; %I1+0
04D7123B  66 89 0D CC CC CC CC          mov [CCCCCCCCH], cx ; $$DATA$$+20

04D71242  66 8B 0D CC CC CC CC          mov cx, [CCCCCCCCH] ; %I1+2
04D71249  66 89 0D CC CC CC CC          mov [CCCCCCCCH], cx ; $$DATA$$+22

04D71250  66 8B 0D CC CC CC CC          mov cx, [CCCCCCCCH] ; %I1+4
04D71257  66 89 0D CC CC CC CC          mov [CCCCCCCCH], cx ; $$DATA$$+24

04D7125E  66 8B 0D CC CC CC CC          mov cx, [CCCCCCCCH] ; %I1+6
04D71265  66 89 0D CC CC CC CC          mov [CCCCCCCCH], cx ; $$DATA$$+26

04D7126C  66 8B 0D CC CC CC CC          mov cx, [CCCCCCCCH] ; %I1+8
04D71273  66 89 0D CC CC CC CC          mov [CCCCCCCCH], cx ; $$DATA$$+28

04D7127A  66 8B 0D CC CC CC CC          mov cx, [CCCCCCCCH] ; %I1+10
04D71281  66 89 0D CC CC CC CC          mov [CCCCCCCCH], cx ; $$DATA$$+30

04D71288  66 8B 0D CC CC CC CC          mov cx, [CCCCCCCCH] ; %I1+12
04D7128F  66 89 0D CC CC CC CC          mov [CCCCCCCCH], cx ; $$DATA$$+32

04D71296  66 8B 0D CC CC CC CC          mov cx, [CCCCCCCCH] ; %I1+14
04D7129D  66 89 0D CC CC CC CC          mov [CCCCCCCCH], cx ; $$DATA$$+34

04D712A4  66 8B 0D CC CC CC CC          mov cx, [CCCCCCCCH] ; %I1+16
04D712AB  66 89 0D CC CC CC CC          mov [CCCCCCCCH], cx ; $$DATA$$+36

04D712B2  66 8B 0D CC CC CC CC          mov cx, [CCCCCCCCH] ; %I1+18
04D712B9  66 89 0D CC CC CC CC          mov [CCCCCCCCH], cx ; $$DATA$$+38

04D712C0  66 8B 0D CC CC CC CC          mov cx, [CCCCCCCCH] ; %I1+20
04D712C7  66 89 0D CC CC CC CC          mov [CCCCCCCCH], cx ; $$DATA$$+40

04D712CE  66 8B 0D CC CC CC CC          mov cx, [CCCCCCCCH] ; %I1+22
04D712D5  66 89 0D CC CC CC CC          mov [CCCCCCCCH], cx ; $$DATA$$+42

04D712DC  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+0
04D712E2  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+44

04D712E8  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+1
04D712EE  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+45

04D712F4  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+3
04D712FA  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+46

04D71300  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+4
04D71306  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+47

04D7130C  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+5
04D71312  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+48

04D71318  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+6
04D7131E  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+49

04D71324  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+7
04D7132A  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+50

04D71330  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+8
04D71336  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+51

04D7133C  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+9
04D71342  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+52

04D71348  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+10
04D7134E  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+53

04D71354  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+11
04D7135A  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+54

04D71360  C3                            ret


*** OUTPUT:
04D71361  C3                            ret



**************************************************
	Task TIMED init code
**************************************************

04D71362  55                            push ebp
04D71363  8B EC                         mov ebp, esp

04D71365  8B E5                         mov esp, ebp
04D71367  5D                            pop ebp

04D71368  C3                            ret



**************************************************
	Global init code
**************************************************

04D71380  55                            push ebp
04D71381  8B EC                         mov ebp, esp

04D71383  8B E5                         mov esp, ebp
04D71385  5D                            pop ebp

04D71386  C3                            ret



**************************************************
	Global RETAIN init code
**************************************************

04D71387  55                            push ebp
04D71388  8B EC                         mov ebp, esp

04D7138A  8B E5                         mov esp, ebp
04D7138C  5D                            pop ebp

04D7138D  C3                            ret



********************************************
MEMORY MAP
********************************************

Start code area:			 4D70020h
End code area:				 4D71390h
Code size:					    1370h

Start local data area:		 4CE4020h
End local data area:		 4CE4057h
Local data size:			      37h

Start retentive data area:	       0h
End retentive data area:	       0h
Retentive data size:		       0h

Start bit data area:		       0h
End bit data area:			       0h
Bit data size:				       0h



********************************************
CODE ID:                                F2135E78
DEBUG MEMO ID:                          0000B422
FULL MEMO ID:                           00001125
RELOCATION ADDR:                        04D70020
********************************************
