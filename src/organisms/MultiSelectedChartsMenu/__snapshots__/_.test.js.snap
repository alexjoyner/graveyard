// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`BaseMultiSelectedChartsMenu component Base component state Should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <BaseMultiSelectedChartsMenu
    buildGraph={[MockFunction]}
    multiSelectedPoints={
      Object {
        "1": Object {
          "id": 1,
          "name": "test",
        },
        "2": Object {
          "id": 2,
          "name": "test2",
        },
      }
    }
    removePoint={[MockFunction]}
    showNotification={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <br />,
        <ForwardRef>
          Charts Selected:
        </ForwardRef>,
        <ForwardRef>
          <ListItem>
            test
            <Button
              color="dark"
              ghost={false}
              onClick={[Function]}
              size="small"
            >
              <GoTrashcan
                color="#ff7675"
                size={20}
              />
            </Button>
          </ListItem>
          <ListItem>
            test2
            <Button
              color="dark"
              ghost={false}
              onClick={[Function]}
              size="small"
            >
              <GoTrashcan
                color="#ff7675"
                size={20}
              />
            </Button>
          </ListItem>
          <ListItem
            color="primary"
            onClick={[Function]}
          >
            Build Graph
          </ListItem>
        </ForwardRef>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": "br",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "Charts Selected:",
        },
        "ref": null,
        "rendered": "Charts Selected:",
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": undefined,
          "componentStyle": ComponentStyle {
            "componentId": "sc-jKJlTe",
            "isStatic": false,
            "rules": Array [
              "
  -moz-box-sizing: border-box; 
  -webkit-box-sizing: border-box; 
  box-sizing: border-box; 
  top: 0;
  left: 0;
  background-color: ",
              [Function],
              ";
  border: none;
  width: 100%;
  height: 41px;
  line-height: 41px;
  vertical-align: middle;
  padding-left: 10px;
",
            ],
          },
          "displayName": "styled.div",
          "render": [Function],
          "styledComponentId": "sc-jKJlTe",
          "target": "div",
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            Array [
              <ListItem>
                test
                <Button
                  color="dark"
                  ghost={false}
                  onClick={[Function]}
                  size="small"
                >
                  <GoTrashcan
                    color="#ff7675"
                    size={20}
                  />
                </Button>
              </ListItem>,
              <ListItem>
                test2
                <Button
                  color="dark"
                  ghost={false}
                  onClick={[Function]}
                  size="small"
                >
                  <GoTrashcan
                    color="#ff7675"
                    size={20}
                  />
                </Button>
              </ListItem>,
            ],
            <ListItem
              color="primary"
              onClick={[Function]}
            >
              Build Graph
            </ListItem>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "1",
            "nodeType": "function",
            "props": Object {
              "children": Array [
                "test",
                <Button
                  color="dark"
                  ghost={false}
                  onClick={[Function]}
                  size="small"
                >
                  <GoTrashcan
                    color="#ff7675"
                    size={20}
                  />
                </Button>,
              ],
            },
            "ref": null,
            "rendered": Array [
              "test",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <GoTrashcan
                    color="#ff7675"
                    size={20}
                  />,
                  "color": "dark",
                  "ghost": false,
                  "onClick": [Function],
                  "size": "small",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "color": "#ff7675",
                    "size": 20,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "2",
            "nodeType": "function",
            "props": Object {
              "children": Array [
                "test2",
                <Button
                  color="dark"
                  ghost={false}
                  onClick={[Function]}
                  size="small"
                >
                  <GoTrashcan
                    color="#ff7675"
                    size={20}
                  />
                </Button>,
              ],
            },
            "ref": null,
            "rendered": Array [
              "test2",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <GoTrashcan
                    color="#ff7675"
                    size={20}
                  />,
                  "color": "dark",
                  "ghost": false,
                  "onClick": [Function],
                  "size": "small",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "color": "#ff7675",
                    "size": 20,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "Build Graph",
              "color": "primary",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "Build Graph",
            "type": [Function],
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": undefined,
          "componentStyle": ComponentStyle {
            "componentId": "sc-dxgOiQ",
            "isStatic": true,
            "rules": Array [
              "
    text-align: center;
",
            ],
          },
          "displayName": "styled.div",
          "render": [Function],
          "styledComponentId": "sc-dxgOiQ",
          "target": "div",
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <br />,
          <ForwardRef>
            Charts Selected:
          </ForwardRef>,
          <ForwardRef>
            <ListItem>
              test
              <Button
                color="dark"
                ghost={false}
                onClick={[Function]}
                size="small"
              >
                <GoTrashcan
                  color="#ff7675"
                  size={20}
                />
              </Button>
            </ListItem>
            <ListItem>
              test2
              <Button
                color="dark"
                ghost={false}
                onClick={[Function]}
                size="small"
              >
                <GoTrashcan
                  color="#ff7675"
                  size={20}
                />
              </Button>
            </ListItem>
            <ListItem
              color="primary"
              onClick={[Function]}
            >
              Build Graph
            </ListItem>
          </ForwardRef>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "br",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "Charts Selected:",
          },
          "ref": null,
          "rendered": "Charts Selected:",
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": undefined,
            "componentStyle": ComponentStyle {
              "componentId": "sc-jKJlTe",
              "isStatic": false,
              "rules": Array [
                "
  -moz-box-sizing: border-box; 
  -webkit-box-sizing: border-box; 
  box-sizing: border-box; 
  top: 0;
  left: 0;
  background-color: ",
                [Function],
                ";
  border: none;
  width: 100%;
  height: 41px;
  line-height: 41px;
  vertical-align: middle;
  padding-left: 10px;
",
              ],
            },
            "displayName": "styled.div",
            "render": [Function],
            "styledComponentId": "sc-jKJlTe",
            "target": "div",
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              Array [
                <ListItem>
                  test
                  <Button
                    color="dark"
                    ghost={false}
                    onClick={[Function]}
                    size="small"
                  >
                    <GoTrashcan
                      color="#ff7675"
                      size={20}
                    />
                  </Button>
                </ListItem>,
                <ListItem>
                  test2
                  <Button
                    color="dark"
                    ghost={false}
                    onClick={[Function]}
                    size="small"
                  >
                    <GoTrashcan
                      color="#ff7675"
                      size={20}
                    />
                  </Button>
                </ListItem>,
              ],
              <ListItem
                color="primary"
                onClick={[Function]}
              >
                Build Graph
              </ListItem>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "1",
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  "test",
                  <Button
                    color="dark"
                    ghost={false}
                    onClick={[Function]}
                    size="small"
                  >
                    <GoTrashcan
                      color="#ff7675"
                      size={20}
                    />
                  </Button>,
                ],
              },
              "ref": null,
              "rendered": Array [
                "test",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": <GoTrashcan
                      color="#ff7675"
                      size={20}
                    />,
                    "color": "dark",
                    "ghost": false,
                    "onClick": [Function],
                    "size": "small",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "color": "#ff7675",
                      "size": 20,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "2",
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  "test2",
                  <Button
                    color="dark"
                    ghost={false}
                    onClick={[Function]}
                    size="small"
                  >
                    <GoTrashcan
                      color="#ff7675"
                      size={20}
                    />
                  </Button>,
                ],
              },
              "ref": null,
              "rendered": Array [
                "test2",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": <GoTrashcan
                      color="#ff7675"
                      size={20}
                    />,
                    "color": "dark",
                    "ghost": false,
                    "onClick": [Function],
                    "size": "small",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "color": "#ff7675",
                      "size": 20,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "Build Graph",
                "color": "primary",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Build Graph",
              "type": [Function],
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": undefined,
            "componentStyle": ComponentStyle {
              "componentId": "sc-dxgOiQ",
              "isStatic": true,
              "rules": Array [
                "
    text-align: center;
",
              ],
            },
            "displayName": "styled.div",
            "render": [Function],
            "styledComponentId": "sc-dxgOiQ",
            "target": "div",
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
