// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App component Should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App
    setGroups={
      [MockFunction] {
        "calls": Array [
          Array [
            "test",
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <TestNotification />,
        <Header
          color="dark"
          fontSize="25px"
          height="67px"
          logoText="Dashboard Demo"
          sticky={true}
        >
          <FeedbackButton />
        </Header>,
        <SideBarPage
          sideBarContents={
            <Connect(BaseSideBarContent)
              setGroups={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      "test",
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                  ],
                }
              }
            />
          }
        >
          <Connect(BaseGaugeBlockArray) />
        </SideBarPage>,
        <Connect(BaseHistoricalGraphModal)
          modalData={
            Object {
              "setGroups": [MockFunction] {
                "calls": Array [
                  Array [
                    "test",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
            }
          }
        />,
      ],
      "style": Object {
        "marginTop": "80px",
      },
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <FeedbackButton />,
          "color": "dark",
          "fontSize": "25px",
          "height": "67px",
          "logoText": "Dashboard Demo",
          "sticky": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Connect(BaseGaugeBlockArray) />,
          "sideBarContents": <Connect(BaseSideBarContent)
            setGroups={
              [MockFunction] {
                "calls": Array [
                  Array [
                    "test",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              }
            }
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "modalData": Object {
            "setGroups": [MockFunction] {
              "calls": Array [
                Array [
                  "test",
                ],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
              ],
            },
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <TestNotification />,
          <Header
            color="dark"
            fontSize="25px"
            height="67px"
            logoText="Dashboard Demo"
            sticky={true}
          >
            <FeedbackButton />
          </Header>,
          <SideBarPage
            sideBarContents={
              <Connect(BaseSideBarContent)
                setGroups={
                  [MockFunction] {
                    "calls": Array [
                      Array [
                        "test",
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": undefined,
                      },
                    ],
                  }
                }
              />
            }
          >
            <Connect(BaseGaugeBlockArray) />
          </SideBarPage>,
          <Connect(BaseHistoricalGraphModal)
            modalData={
              Object {
                "setGroups": [MockFunction] {
                  "calls": Array [
                    Array [
                      "test",
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                  ],
                },
              }
            }
          />,
        ],
        "style": Object {
          "marginTop": "80px",
        },
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <FeedbackButton />,
            "color": "dark",
            "fontSize": "25px",
            "height": "67px",
            "logoText": "Dashboard Demo",
            "sticky": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Connect(BaseGaugeBlockArray) />,
            "sideBarContents": <Connect(BaseSideBarContent)
              setGroups={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      "test",
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                  ],
                }
              }
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "modalData": Object {
              "setGroups": [MockFunction] {
                "calls": Array [
                  Array [
                    "test",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
